paths:
  /api/products:
    get:
      summary: Returns every Product in the DataBase.
      tags:
        - Products
      parameters:
        - limit: number
          in: req
          description: Optional parameter needed to paginate the results.
          schema:
            $type: Number
        - page: number
          in: req
          description: Optional parameter needed to paginate the results.
          schema:
            $type: Number
      responses:
        "200":
          description: Returns every product in the DataBase 
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#components/schemas/AllProducts'
        "400":
          description: Incomplete Values Error, generated when expected user input is not provided.
        "404":
          description: Not Found Error, generated when there is no cart associated to the user mail.
        "500":
          description: Unhandled Error, generated when something unexpected happened.
        "503":
          description: Internal Server Error, usually generated by a defective query or connection issue.
    post:
      summary: Create a new instance of Product in the DataBase.
      tags:
        - Products
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#components/requestBodies/addProduct'
      responses:
        "200":
          description: Returns the newly created Product 
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#components/schemas/Product'
        "400":
          description: Incomplete Values Error, generated when expected user input is not provided.
        "401":
          description: User tried to access to unauthorized resources.
        "404":
          description: Not Found Error, generated when there is no cart associated to the user mail.
        "500":
          description: Unhandled Error, generated when something unexpected happened.
        "503":
          description: Internal Server Error, usually generated by a defective query or connection issue.
  /api/products/{id}:
    get:
      summary: Returns one Product from its ID.
      tags:
        - Products
      parameters:
        - name: id
          in: path
          required: true
          description: ID of product to return
          schema:
            $type: String
      responses:
        "200":
          description: Returns the product 
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#components/schemas/Product'
        "400":
          description: Incomplete Values Error, generated when expected user input is not provided.
        "404":
          description: Not Found Error, generated when there is no cart associated to the user mail.
        "500":
          description: Unhandled Error, generated when something unexpected happened.
        "503":
          description: Internal Server Error, usually generated by a defective query or connection issue.
    put:
      summary: Updates one Product from its ID.
      tags:
        - Products
      parameters:
        - name: id
          in: path
          required: true
          description: ID of product to return
          schema:
            $type: String
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#components/requestBodies/addProduct'
      responses:
        "200":
          description: Returns the newly created product.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#components/schemas/Product'
        "400":
          description: Incomplete Values Error, generated when expected user input is not provided.
        "401":
          description: User tried to access to unauthorized resources.
        "404":
          description: Not Found Error, generated when there is no cart associated to the user mail.
        "500":
          description: Unhandled Error, generated when something unexpected happened.
        "503":
          description: Internal Server Error, usually generated by a defective query or connection issue.
    delete:
      summary: Deletes one Product from its ID.
      tags:
        - Products
      parameters:
        - name: id
          in: path
          required: true
          description: ID of product to delete
          schema:
            $type: String
      responses:
        "200":
          description: Deletes the product.
        "400":
          description: Incomplete Values Error, generated when expected user input is not provided.
        "404":
          description: Not Found Error, generated when there is no cart associated to the user mail.
        "500":
          description: Unhandled Error, generated when something unexpected happened.
        "503":
          description: Internal Server Error, usually generated by a defective query or connection issue.
  /api/products/mockingproducts:
    get:
      summary: Returns a mock for a lot of Products.
      tags:
        - Products
      responses:
        "200":
          description: Returns the mock for Products 
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#components/schemas/AllProducts'
        "400":
          description: Incomplete Values Error, generated when expected user input is not provided.
        "404":
          description: Not Found Error, generated when there is no cart associated to the user mail.
        "500":
          description: Unhandled Error, generated when something unexpected happened.
        "503":
          description: Internal Server Error, usually generated by a defective query or connection issue.

components:
  schemas:
    Product:
      type: object
      properties:
        _id:
          type: ObjectId
          description: ID autogenerated by MongoDB.
        title:
          type: string
          description: Name of the product.
        category:
          type: string
          description: Category of the product.
        description:
          type: string
          description: Description of the product.
        code:
          type: string
          description: Code of the product.
        price:
          type: number
          description: Price of the product.
        stock:
          type: number
          description: Stock of the product.
        thumbnail:
          type: array
          items:
            type: object
            properties:
              url:
                type: string
                description: URL corresponding to product image.
              quantity:
                type: number
                description: Quantity of the product.
          description: URLs array for the images of the product.
        status:
          type: boolean
          description: I don't really know???
        owner:
          type: string
          description: Mail of whom the product belongs to.
      description: Instance of product object retrieved from database.
      example:
        _id: ObjectId("mongodbuid")
        title: Product
        code: P001
        price: 1000
        stock: 100
        thumbnail:
          - url: https://example.com/image1
          - url: https://example.com/image2
          - url: https://example.com/image3
        status: true
        owner: user@premiumuser.com
    AllProducts:
      type: object
      properties:
        products:
          type: array
          items:
            type: object
            properties:
              _id:
                type: ObjectId
                description: ID autogenerated by MongoDB.
              title:
                type: string
                description: Name of the product.
              category:
                type: string
                description: Category of the product.
              description:
                type: string
                description: Description of the product.
              code:
                type: string
                description: Code of the product.
              price:
                type: number
                description: Price of the product.
              stock:
                type: number
                description: Stock of the product.
              thumbnail:
                type: array
                items:
                  type: object
                  properties:
                    url:
                      type: string
                      description: URL corresponding to product image.
                    quantity:
                      type: number
                      description: Quantity of the product.
                description: URLs array for the images of the product.
              status:
                type: boolean
                description: I don't really know???
              owner:
                type: string
                description: Mail of whom the product belongs to.
          description: Instance of product object retrieved from database.
      description: Array of every product object retrieved from database.
      example:
        products:
          - _id: ObjectId("mongodbuid1")
            title: Product1
            code: P001
            price: 1000
            stock: 100
            thumbnail:
              - url: https://example.com/image1
              - url: https://example.com/image2
              - url: https://example.com/image3
            status: true
            owner: user@premiumuser.com
          - _id: ObjectId("mongodbuid2")
            title: Product2
            code: P002
            price: 1000
            stock: 100
            thumbnail:
              - url: https://example.com/image1
              - url: https://example.com/image2
              - url: https://example.com/image3
            status: true
            owner: user@premiumuser.com
          - _id: ObjectId("mongodbuid3")
            title: Product3
            code: P003
            price: 1000
            stock: 100
            thumbnail:
              - url: https://example.com/image1
              - url: https://example.com/image2
              - url: https://example.com/image3
            status: true
            owner: user@premiumuser.com
  requestBodies:
    addProduct:
      type: object
      properties:
        title:
          type: string
          description: Name of the product.
        category:
          type: string
          description: Category of the product.
        description:
          type: string
          description: Description of the product.
        code:
          type: string
          description: Code of the product.
        price:
          type: number
          description: Price of the product.
        stock:
          type: number
          description: Stock of the product.
        thumbnail:
          type: array
          items:
            type: object
            properties:
              url:
                type: string
                description: URL corresponding to product image.
              quantity:
                type: number
                description: Quantity of the product.
          description: URLs array for the images of the product.
        status:
          type: boolean
          description: I don't really know???
        owner:
          type: string
          description: Mail of whom the product belongs to.
      description: Instance of product object retrieved from database.
      example:
        title: Product
        code: P001
        price: 1000
        stock: 100
        thumbnail:
          - url: https://example.com/image1
          - url: https://example.com/image2
          - url: https://example.com/image3
        status: true
        owner: user@premiumuser.com